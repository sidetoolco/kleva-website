---
// Types
import type { CaseStudy } from '../../types/sanity.types';
// Libs
import { urlForImage } from 'src/sanity/lib/url-for-image';
import { Image } from 'astro:assets';
// Components
import PortableText from '@components/PortableText.astro';
// Assets
import bgPattern from '@assets/bg__pattern__casestudies.png';

interface Props {
	caseStudy: CaseStudy;
}

const { caseStudy } = Astro.props;
---

<!-- HERO -->
<section
	id="case__study__hero"
	class="section page__section light"
	class:list={[{ 'pb-24 md:pb-36': caseStudy.videoUrl }]}
>
	<div>
		<div class="relative z-10 flex flex-col items-center gap-4">
			{
				caseStudy.logo && (
					<div class="h-8 md:h-10 xl:h-12">
						<Image
							src={urlForImage(caseStudy.logo).url()}
							alt={caseStudy.title ?? ''}
							inferSize={true}
							class="h-full w-auto"
						/>
					</div>
				)
			}
			<h1
				class="text-center font-titles text-[40px] font-normal leading-[1] text-black sm:max-w-[80%] md:text-6xl md:text-[70px] md:leading-[1]"
			>
				<PortableText portableText={caseStudy.heroTitle} />
			</h1>
		</div>
	</div>
	<!-- Text & image -->
	<div
		class="relative z-10 mx-auto mt-4 w-fit max-w-md text-pretty text-center text-lg text-secondary text-opacity-90 md:max-w-lg md:text-xl lg:mb-4 lg:mt-6 lg:max-w-screen-lg"
	>
		<PortableText portableText={caseStudy.description} />
	</div>
	<!-- Blocks backgrounds -->
	<div class="relative">
		<div class="absolute left-1/2 z-0 w-full max-w-[480px] -translate-x-1/2 -translate-y-1/2">
			<Image src={bgPattern} alt="A background pattern" class="h-full w-full object-cover" />
		</div>
	</div>
	<div id="hero__img__container" class="relative z-10 mt-10 overflow-hidden">
		{
			caseStudy.videoUrl ? (
				<video id="hero__video" playsinline loop muted autoplay class="left-0 top-0 mx-auto h-auto w-full rounded-lg">
					<source src={caseStudy.videoUrl} type="video/mp4" />
				</video>
			) : (
				caseStudy.heroImage && (
					<Image
						id="hero__img"
						src={urlForImage(caseStudy.heroImage).url()}
						alt={caseStudy.title ?? ''}
						class="left-0 top-0 mx-auto h-auto w-full max-w-[1024px]"
						inferSize={true}
					/>
				)
			)
		}
	</div>
</section>

<style>
	#case__study__hero {
		display: flex;
		flex-direction: column;
		position: relative;
		padding-top: calc(var(--header-height-mobile) + 64px);
		padding-bottom: 0;
	}
	#hero__video {
		clip-path: polygon(10% 5%, 90% 5%, 90% 95%, 10% 95%);
	}
	@media (min-width: 768px) {
		#case__study__hero {
			padding-top: calc(var(--header-height-desktop) + 82px);
		}
	}
	@media (min-width: 1024px) {
		#case__study__hero {
			padding-top: calc(var(--header-height-desktop) + 120px);
		}
	}
</style>

<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';
	gsap.registerPlugin(ScrollTrigger);

	const imgContainer = document.getElementById('hero__img__container');
	const imgHero = document.getElementById('hero__img');
	const videoHero = document.getElementById('hero__video');

	function adjustContainerHeight() {
		if (imgHero && imgContainer) {
			imgContainer.style.height =
				window.innerWidth > 640 ? `${imgHero.offsetHeight * (3 / 5)}px` : `${imgHero.offsetHeight * (4 / 5)}px`;
		}
	}

	document.addEventListener('DOMContentLoaded', () => {
		adjustContainerHeight();
		imgHero?.addEventListener('load', adjustContainerHeight);

		gsap
			.timeline({
				scrollTrigger: {
					trigger: imgContainer,
					start: 'top bottom',
					end: 'bottom 85%',
					scrub: 1,
				},
			})
			.to(videoHero, {
				clipPath: 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)',
			});

		window.addEventListener('resize', adjustContainerHeight);
	});
</script>
