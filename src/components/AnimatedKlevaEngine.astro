---
import ZcalWidget from './ZcalWidget.astro';
---

<section class="animated-kleva-engine">
  <div class="container">
    <div class="section-header">
      <span class="section-label">HOW IT WORKS</span>
      <h2>5-phase AI process that never stops learning</h2>
      <p>Kleva's AI engine processes thousands of conversations simultaneously, improving with every interaction</p>
    </div>

    <div class="engine-visualization">
      <!-- Central AI Brain -->
      <div class="ai-brain">
        <svg viewBox="0 0 200 200" class="brain-svg">
          <defs>
            <linearGradient id="brain-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:rgba(0,0,0,0.1);stop-opacity:1" />
              <stop offset="100%" style="stop-color:rgba(0,0,0,0.3);stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <!-- Outer circles -->
          <circle cx="100" cy="100" r="90" fill="none" stroke="rgba(0,0,0,0.1)" stroke-width="1" />
          <circle cx="100" cy="100" r="70" fill="none" stroke="rgba(0,0,0,0.15)" stroke-width="1" stroke-dasharray="5 5" class="rotate-ring-slow" />
          <circle cx="100" cy="100" r="50" fill="none" stroke="rgba(0,0,0,0.2)" stroke-width="1" />
          
          <!-- Core -->
          <circle cx="100" cy="100" r="30" fill="url(#brain-gradient)" class="pulse-core" />
          <circle cx="100" cy="100" r="20" fill="#000" />
          
          <!-- Connection points -->
          <g class="connection-points">
            <circle cx="100" cy="30" r="3" fill="#000" class="point-pulse" />
            <circle cx="170" cy="100" r="3" fill="#000" class="point-pulse" style="animation-delay: 0.5s" />
            <circle cx="100" cy="170" r="3" fill="#000" class="point-pulse" style="animation-delay: 1s" />
            <circle cx="30" cy="100" r="3" fill="#000" class="point-pulse" style="animation-delay: 1.5s" />
          </g>
        </svg>
        <div class="brain-label">Kleva AI Core</div>
      </div>

      <!-- Process Flow -->
      <div class="process-phases">
        <div class="phase" data-phase="1">
          <div class="phase-icon">
            <svg viewBox="0 0 48 48" class="phase-svg">
              <rect x="12" y="12" width="24" height="24" rx="2" fill="none" stroke="currentColor" stroke-width="1.5" />
              <line x1="18" y1="20" x2="30" y2="20" stroke="currentColor" stroke-width="1.5" class="scan-line scan-1" />
              <line x1="18" y1="24" x2="30" y2="24" stroke="currentColor" stroke-width="1.5" class="scan-line scan-2" />
              <line x1="18" y1="28" x2="30" y2="28" stroke="currentColor" stroke-width="1.5" class="scan-line scan-3" />
            </svg>
          </div>
          <div class="phase-content">
            <div class="phase-number">01</div>
            <h3>Analyze</h3>
            <p>Instantly assess debtor profile, payment history, and behavioral patterns</p>
            <div class="phase-metric">
              <span class="metric-value">0.3s</span>
              <span class="metric-label">Response time</span>
            </div>
          </div>
        </div>

        <div class="phase" data-phase="2">
          <div class="phase-icon">
            <svg viewBox="0 0 48 48" class="phase-svg">
              <circle cx="24" cy="16" r="6" fill="none" stroke="currentColor" stroke-width="1.5" />
              <path d="M12 36C12 30 17 26 24 26C31 26 36 30 36 36" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
              <circle cx="24" cy="16" r="2" fill="currentColor" class="pulse-dot" />
            </svg>
          </div>
          <div class="phase-content">
            <div class="phase-number">02</div>
            <h3>Personalize</h3>
            <p>Tailor approach based on cultural context and individual circumstances</p>
            <div class="phase-metric">
              <span class="metric-value">45+</span>
              <span class="metric-label">Dialects supported</span>
            </div>
          </div>
        </div>

        <div class="phase" data-phase="3">
          <div class="phase-icon">
            <svg viewBox="0 0 48 48" class="phase-svg">
              <path d="M12 24L20 32L36 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" fill="none" class="handshake-path" />
              <circle cx="12" cy="24" r="3" fill="currentColor" opacity="0.3" />
              <circle cx="36" cy="16" r="3" fill="currentColor" opacity="0.3" />
            </svg>
          </div>
          <div class="phase-content">
            <div class="phase-number">03</div>
            <h3>Negotiate</h3>
            <p>Dynamically adjust payment plans to maximize recovery probability</p>
            <div class="phase-metric">
              <span class="metric-value">73%</span>
              <span class="metric-label">Success rate</span>
            </div>
          </div>
        </div>

        <div class="phase" data-phase="4">
          <div class="phase-icon">
            <svg viewBox="0 0 48 48" class="phase-svg">
              <path d="M24 8L10 14V24C10 32 16 38.5 24 40C32 38.5 38 32 38 24V14L24 8Z" fill="none" stroke="currentColor" stroke-width="1.5" />
              <path d="M18 24L22 28L30 20" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="check-mark" />
            </svg>
          </div>
          <div class="phase-content">
            <div class="phase-number">04</div>
            <h3>Ensure</h3>
            <p>Maintain 100% compliance with local regulations automatically</p>
            <div class="phase-metric">
              <span class="metric-value">0</span>
              <span class="metric-label">Violations</span>
            </div>
          </div>
        </div>

        <div class="phase" data-phase="5">
          <div class="phase-icon">
            <svg viewBox="0 0 48 48" class="phase-svg">
              <circle cx="24" cy="24" r="12" fill="none" stroke="currentColor" stroke-width="1.5" />
              <path d="M24 12V24L30 30" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
              <path d="M32 8L36 12L32 16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="arrow-rotate" />
            </svg>
          </div>
          <div class="phase-content">
            <div class="phase-number">05</div>
            <h3>Optimize</h3>
            <p>Learn from every interaction to improve future performance</p>
            <div class="phase-metric">
              <span class="metric-value">94%</span>
              <span class="metric-label">First-call resolution</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Connection Lines Animation -->
      <svg class="connection-lines" viewBox="0 0 1200 600">
        <defs>
          <linearGradient id="line-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:var(--color-gray-300);stop-opacity:0" />
            <stop offset="50%" style="stop-color:var(--color-black);stop-opacity:1" />
            <stop offset="100%" style="stop-color:var(--color-gray-300);stop-opacity:0" />
          </linearGradient>
        </defs>
        <path class="connection-path" d="M 100,300 Q 300,200 600,300 T 1100,300" />
      </svg>
    </div>

    <div class="engine-stats">
      <div class="stat-card">
        <div class="stat-value">10,000+</div>
        <div class="stat-label">Concurrent calls</div>
      </div>
      <div class="stat-card">
        <div class="stat-value">4.2 min</div>
        <div class="stat-label">Avg handle time</div>
      </div>
      <div class="stat-card">
        <div class="stat-value">94%</div>
        <div class="stat-label">First-call resolution</div>
      </div>
      <div class="stat-card">
        <div class="stat-value">24/7</div>
        <div class="stat-label">Always available</div>
      </div>
    </div>

    <div class="cta-section">
      <h3>See Kleva AI in action</h3>
      <p>Watch how our AI handles real collection calls in Spanish and Portuguese</p>
      <ZcalWidget mode="popup" buttonText="Book a 15-minute intro call" />
    </div>
  </div>
</section>

<style>
  .animated-kleva-engine {
    padding: 80px 0;
    background: linear-gradient(180deg, var(--color-white) 0%, var(--color-gray-50) 100%);
    position: relative;
    overflow: hidden;
  }

  .section-header {
    text-align: center;
    margin-bottom: 64px;
  }

  .section-label {
    display: inline-block;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-gray-500);
    margin-bottom: 16px;
  }

  .section-header h2 {
    font-size: 36px;
    font-weight: 700;
    margin-bottom: 16px;
    color: var(--color-black);
  }

  .section-header p {
    font-size: 16px;
    color: var(--color-gray-600);
    max-width: 600px;
    margin: 0 auto;
  }

  /* Engine Visualization */
  .engine-visualization {
    position: relative;
    margin-bottom: 64px;
    min-height: 500px;
  }

  .ai-brain {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 10;
  }

  .brain-label {
    margin-top: 16px;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-black);
  }

  /* Process Phases */
  .process-phases {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 24px;
    position: relative;
    z-index: 5;
  }

  .phase {
    background: var(--color-white);
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .phase:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .phase.active {
    background: var(--color-black);
    color: var(--color-white);
  }

  .phase-icon {
    margin-bottom: 16px;
    height: 60px;
    width: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 16px;
  }

  .phase-svg {
    width: 48px;
    height: 48px;
    color: var(--color-black);
  }

  .phase.active .phase-svg {
    color: var(--color-white);
  }

  /* Brain SVG animations */
  .brain-svg {
    width: 200px;
    height: 200px;
  }

  @keyframes rotate-slow {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes pulse-scale {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  @keyframes point-pulse {
    0%, 100% { opacity: 0.3; r: 3; }
    50% { opacity: 1; r: 5; }
  }

  @keyframes scan {
    0%, 100% { opacity: 0.2; }
    50% { opacity: 1; }
  }

  @keyframes draw-path {
    from { stroke-dashoffset: 100; }
    to { stroke-dashoffset: 0; }
  }

  @keyframes arrow-spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .rotate-ring-slow {
    transform-origin: center;
    animation: rotate-slow 20s linear infinite;
  }

  .pulse-core {
    animation: pulse-scale 3s ease-in-out infinite;
    transform-origin: center;
  }

  .point-pulse {
    animation: point-pulse 2s ease-in-out infinite;
  }

  .scan-line {
    animation: scan 1.5s ease-in-out infinite;
  }

  .scan-1 { animation-delay: 0s; }
  .scan-2 { animation-delay: 0.2s; }
  .scan-3 { animation-delay: 0.4s; }

  .pulse-dot {
    animation: pulse-scale 2s ease-in-out infinite;
    transform-origin: center;
  }

  .handshake-path {
    stroke-dasharray: 100;
    animation: draw-path 2s ease-in-out infinite;
  }

  .check-mark {
    stroke-dasharray: 50;
    animation: draw-path 1.5s ease-in-out infinite;
  }

  .arrow-rotate {
    transform-origin: 34px 12px;
    animation: arrow-spin 4s linear infinite;
  }

  .phase-number {
    font-size: 32px;
    font-weight: 700;
    color: var(--color-gray-300);
    margin-bottom: 8px;
  }

  .phase.active .phase-number {
    color: var(--color-gray-500);
  }

  .phase h3 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 12px;
    color: var(--color-black);
  }

  .phase.active h3 {
    color: var(--color-white);
  }

  .phase p {
    font-size: 14px;
    line-height: 1.5;
    color: var(--color-gray-600);
    margin-bottom: 16px;
  }

  .phase.active p {
    color: var(--color-gray-300);
  }

  .phase-metric {
    display: flex;
    align-items: center;
    gap: 8px;
    padding-top: 12px;
    border-top: 1px solid var(--color-gray-200);
  }

  .phase.active .phase-metric {
    border-color: var(--color-gray-700);
  }

  .metric-value {
    font-size: 20px;
    font-weight: 700;
    color: var(--color-black);
  }

  .phase.active .metric-value {
    color: var(--color-white);
  }

  .metric-label {
    font-size: 12px;
    color: var(--color-gray-500);
  }

  .phase.active .metric-label {
    color: var(--color-gray-400);
  }

  /* Connection Lines */
  .connection-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .connection-path {
    fill: none;
    stroke: url(#line-gradient);
    stroke-width: 2;
    stroke-dasharray: 10, 5;
    animation: dash 20s linear infinite;
  }

  @keyframes dash {
    to {
      stroke-dashoffset: -1000;
    }
  }

  /* Engine Stats */
  .engine-stats {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 24px;
    margin-bottom: 64px;
  }

  .stat-card {
    text-align: center;
    padding: 24px;
    background: var(--color-white);
    border-radius: 8px;
    border: 1px solid var(--color-gray-200);
  }

  .stat-value {
    font-size: 32px;
    font-weight: 700;
    color: var(--color-black);
    margin-bottom: 8px;
  }

  .stat-label {
    font-size: 14px;
    color: var(--color-gray-600);
  }

  /* CTA Section */
  .cta-section {
    text-align: center;
    padding: 48px;
    background: var(--color-black);
    border-radius: 16px;
    color: var(--color-white);
  }

  .cta-section h3 {
    font-size: 28px;
    font-weight: 600;
    margin-bottom: 16px;
  }

  .cta-section p {
    font-size: 16px;
    color: var(--color-gray-300);
    margin-bottom: 32px;
  }

  /* Responsive */
  @media (max-width: 968px) {
    .process-phases {
      grid-template-columns: 1fr;
    }

    .engine-stats {
      grid-template-columns: repeat(2, 1fr);
    }

    .ai-brain {
      position: relative;
      transform: none;
      top: auto;
      left: auto;
      margin-bottom: 48px;
    }

    .engine-visualization {
      min-height: auto;
    }
  }

  /* Container */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 24px;
  }
</style>

<script>
  // Animate phases on scroll
  const phases = document.querySelectorAll('.phase');
  let currentPhase = 0;

  setInterval(() => {
    phases.forEach((phase) => phase.classList.remove('active'));
    currentPhase = (currentPhase + 1) % phases.length;
    phases[currentPhase].classList.add('active');
  }, 3000);

  // Click handler for phases
  phases.forEach((phase, index) => {
    phase.addEventListener('click', () => {
      phases.forEach((p) => p.classList.remove('active'));
      phase.classList.add('active');
      currentPhase = index;
    });
  });
</script>