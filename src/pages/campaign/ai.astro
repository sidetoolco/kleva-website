---
import CampaignLayout from '@layouts/CampaignLayout.astro';
import Reviews from '@components/new-home/Reviews.astro';
import CampaignHero from '@components/campaign/CampaignHero.astro';
import CampaignSolutions from '@components/campaign/CampaignSolutions.astro';
---

<CampaignLayout title="Campaign" description="Campaign">
	<main class="min-h-screen overflow-x-hidden">
		<div class="gradient"></div>
		<CampaignHero />
		<Reviews />
		<CampaignSolutions />
	</main>
</CampaignLayout>

<style is:global>
	main {
		position: relative;
		min-height: 100vh;
		overflow: hidden;
		background-color: rgb(var(--clr-black));
	}
	.page__section {
		position: relative;
		z-index: 5;
	}
	.section {
		position: relative;
		z-index: 5;
	}
	.gradient {
		opacity: 0.35;
		position: fixed;
		bottom: 0;
		right: 0;
		transform: translateX(50%);
		width: 200vw;
		aspect-ratio: 1/1;
		aspect-ratio: 1/1;
		background: #be79ff;
		background: radial-gradient(circle at 70% 90%, rgba(190, 121, 255, 1) 0%, rgba(190, 121, 255, 0) 40%);
		/* background-image: linear-gradient(135deg, rgb(var(--clr-black)) 80%, rgb(var(--clr-violet)) 100%); */
	}
	@media (min-width: 1024px) {
		.gradient {
			width: 100vw;
			aspect-ratio: 4/5;
			background: radial-gradient(circle at 80% 100%, rgba(190, 121, 255, 1) 0%, rgba(190, 121, 255, 0) 50%);
		}
	}
	@media (min-width: 1440px) {
		.gradient {
			aspect-ratio: 1/1;
			background: radial-gradient(circle at 60% 110%, rgba(190, 121, 255, 1) 0%, rgba(190, 121, 255, 0) 40%);
		}
	}
	.dark__glass {
		background-color: rgba(var(--clr-black), 0.7);
		backdrop-filter: blur(10px);
	}
</style>

<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';
	gsap.registerPlugin(ScrollTrigger);
	const formSection = document.getElementById('contact-form-v2') as HTMLElement;
	const heroCtaButton = document.getElementById('hero-cta-button') as HTMLButtonElement;
	const solutionsCtaButton = document.getElementById('solutions-cta-button') as HTMLButtonElement;
	const nameInput = document.getElementById('name') as HTMLInputElement;

	function handleCTAClick(event: MouseEvent) {
		event.preventDefault();
		const formPosition = formSection.offsetTop;
		const targetScrollTop = formPosition - 80;

		// Function to detect when scrolling is complete
		function onScrollComplete(callback: () => void) {
			let scrollTimeout: number;

			function checkScrollEnd() {
				clearTimeout(scrollTimeout);
				scrollTimeout = window.setTimeout(() => {
					// Check if we're close to the target position (within 1px tolerance)
					if (Math.abs(window.scrollY - targetScrollTop) <= 1) {
						window.removeEventListener('scroll', checkScrollEnd);
						callback();
					}
				}, 50); // 50ms debounce - adjust if needed
			}

			window.addEventListener('scroll', checkScrollEnd);

			// Fallback timeout in case scroll event doesn't fire properly
			setTimeout(() => {
				window.removeEventListener('scroll', checkScrollEnd);
				clearTimeout(scrollTimeout);
				callback();
			}, 2000);
		}

		window.scrollTo({
			top: targetScrollTop,
			behavior: 'smooth',
		});

		onScrollComplete(() => {
			nameInput.focus();
		});
	}

	[heroCtaButton, solutionsCtaButton].forEach((button) => {
		button.addEventListener('click', handleCTAClick);
	});

	gsap
		.timeline({
			scrollTrigger: {
				trigger: 'main',
				start: 'top top',
				end: 'bottom bottom',
				scrub: true,
			},
		})
		.fromTo(
			'.gradient',
			{
				transform: 'translate(50%, 0%)',
			},
			{
				transform: 'translate(50%, 15%)',
			}
		);
</script>
